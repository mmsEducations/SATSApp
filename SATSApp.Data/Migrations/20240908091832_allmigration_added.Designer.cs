// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SATSApp.Data;

#nullable disable

namespace SATSApp.Data.Migrations
{
    [DbContext(typeof(SATSAppDbContext))]
    [Migration("20240908091832_allmigration_added")]
    partial class allmigration_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SATSApp.Data.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("course_name");

                    b.Property<DateTime>("CreaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("crea_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("CourseId");

                    b.ToTable("Courses", "satsapp");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseDescription = "Description for Course1",
                            CourseName = "Ozz Akademi1",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2634),
                            IsDeleted = false
                        },
                        new
                        {
                            CourseId = 2,
                            CourseDescription = "Description for Course2",
                            CourseName = "Ozz Akademi2",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2637),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SATSApp.Data.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("crea_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("StudentId");

                    b.ToTable("Students", "satsapp");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            BirthDate = new DateTime(2023, 9, 9, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2456),
                            City = "Sivas",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2468),
                            Email = "VolkanArslan@example.com",
                            FirstName = "Volkan",
                            IsDeleted = false,
                            LastName = "Arslan"
                        },
                        new
                        {
                            StudentId = 2,
                            BirthDate = new DateTime(2022, 9, 9, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2471),
                            City = "Zonguldak",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2472),
                            Email = "MuratAkman@example.com",
                            FirstName = "Murat",
                            IsDeleted = false,
                            LastName = "Akman"
                        },
                        new
                        {
                            StudentId = 3,
                            BirthDate = new DateTime(2021, 9, 9, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2473),
                            City = "Muş",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2473),
                            Email = "BüşraAcar@example.com",
                            FirstName = "Büşra",
                            IsDeleted = false,
                            LastName = "Acar"
                        },
                        new
                        {
                            StudentId = 4,
                            BirthDate = new DateTime(2020, 9, 9, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2474),
                            City = "Denizli",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2474),
                            Email = "CanerYılmaz@example.com",
                            FirstName = "Caner",
                            IsDeleted = false,
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            StudentId = 5,
                            BirthDate = new DateTime(2019, 9, 10, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2475),
                            City = "Kayseri",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2475),
                            Email = "BurakYalçın@example.com",
                            FirstName = "Burak",
                            IsDeleted = false,
                            LastName = "Yalçın"
                        },
                        new
                        {
                            StudentId = 6,
                            BirthDate = new DateTime(2018, 9, 10, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2477),
                            City = "Kastamonu",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2478),
                            Email = "MuhammedGül@example.com",
                            FirstName = "Muhammed",
                            IsDeleted = false,
                            LastName = "Gül"
                        },
                        new
                        {
                            StudentId = 7,
                            BirthDate = new DateTime(2017, 9, 10, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2479),
                            City = "Kars",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2479),
                            Email = "AylinAkman@example.com",
                            FirstName = "Aylin",
                            IsDeleted = false,
                            LastName = "Akman"
                        },
                        new
                        {
                            StudentId = 8,
                            BirthDate = new DateTime(2016, 9, 10, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2480),
                            City = "İstanbul",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2481),
                            Email = "CanYavuz@example.com",
                            FirstName = "Can",
                            IsDeleted = false,
                            LastName = "Yavuz"
                        },
                        new
                        {
                            StudentId = 9,
                            BirthDate = new DateTime(2015, 9, 11, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2481),
                            City = "Ağrı",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2482),
                            Email = "MuhammedKaya@example.com",
                            FirstName = "Muhammed",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 10,
                            BirthDate = new DateTime(2014, 9, 11, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2483),
                            City = "Sakarya",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2484),
                            Email = "VolkanArı@example.com",
                            FirstName = "Volkan",
                            IsDeleted = false,
                            LastName = "Arı"
                        },
                        new
                        {
                            StudentId = 11,
                            BirthDate = new DateTime(2013, 9, 11, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2484),
                            City = "Bartın",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2485),
                            Email = "İbrahimKaya@example.com",
                            FirstName = "İbrahim",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 12,
                            BirthDate = new DateTime(2012, 9, 11, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2485),
                            City = "Elazığ",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2486),
                            Email = "EbruYurt@example.com",
                            FirstName = "Ebru",
                            IsDeleted = false,
                            LastName = "Yurt"
                        },
                        new
                        {
                            StudentId = 13,
                            BirthDate = new DateTime(2011, 9, 12, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2486),
                            City = "Karabük",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2487),
                            Email = "HakanErdem@example.com",
                            FirstName = "Hakan",
                            IsDeleted = false,
                            LastName = "Erdem"
                        },
                        new
                        {
                            StudentId = 14,
                            BirthDate = new DateTime(2010, 9, 12, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2487),
                            City = "Kilis",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2488),
                            Email = "YasinArı@example.com",
                            FirstName = "Yasin",
                            IsDeleted = false,
                            LastName = "Arı"
                        },
                        new
                        {
                            StudentId = 15,
                            BirthDate = new DateTime(2009, 9, 12, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2489),
                            City = "Şanlıurfa",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2489),
                            Email = "KemalAkman@example.com",
                            FirstName = "Kemal",
                            IsDeleted = false,
                            LastName = "Akman"
                        },
                        new
                        {
                            StudentId = 16,
                            BirthDate = new DateTime(2008, 9, 12, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2490),
                            City = "Amasya",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2490),
                            Email = "NurBozkurt@example.com",
                            FirstName = "Nur",
                            IsDeleted = false,
                            LastName = "Bozkurt"
                        },
                        new
                        {
                            StudentId = 17,
                            BirthDate = new DateTime(2007, 9, 13, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2491),
                            City = "Nevşehir",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2491),
                            Email = "SinanKaya@example.com",
                            FirstName = "Sinan",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 18,
                            BirthDate = new DateTime(2006, 9, 13, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2493),
                            City = "Afyonkarahisar",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2493),
                            Email = "AbbasKaya@example.com",
                            FirstName = "Abbas",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 19,
                            BirthDate = new DateTime(2005, 9, 13, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2494),
                            City = "İstanbul",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2494),
                            Email = "PinarKurt@example.com",
                            FirstName = "Pinar",
                            IsDeleted = false,
                            LastName = "Kurt"
                        },
                        new
                        {
                            StudentId = 20,
                            BirthDate = new DateTime(2004, 9, 13, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2495),
                            City = "Erzincan",
                            CreaDate = new DateTime(2024, 9, 8, 9, 18, 31, 903, DateTimeKind.Utc).AddTicks(2496),
                            Email = "AbbasArı@example.com",
                            FirstName = "Abbas",
                            IsDeleted = false,
                            LastName = "Arı"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
