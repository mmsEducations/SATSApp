// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SATSApp.Data;

#nullable disable

namespace SATSApp.Data.Migrations
{
    [DbContext(typeof(SATSAppDbContext))]
    partial class SATSAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4",
                            Name = "TestRole",
                            NormalizedName = "TESTROLE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SATSApp.Data.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("course_name");

                    b.Property<DateTime>("CreaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("crea_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("CourseId");

                    b.ToTable("Courses", "satsapp");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseDescription = "Description for Course1",
                            CourseName = "Ozz Akademi1",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7938),
                            IsDeleted = false
                        },
                        new
                        {
                            CourseId = 2,
                            CourseDescription = "Description for Course2",
                            CourseName = "Ozz Akademi2",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7943),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SATSApp.Data.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("crea_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("StudentId");

                    b.ToTable("Students", "satsapp");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            BirthDate = new DateTime(2023, 10, 7, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7030),
                            City = "Adıyaman",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7091),
                            Email = "ÖmerKoç@example.com",
                            FirstName = "Ömer",
                            IsDeleted = false,
                            LastName = "Koç"
                        },
                        new
                        {
                            StudentId = 2,
                            BirthDate = new DateTime(2022, 10, 7, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7094),
                            City = "Kayseri",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7095),
                            Email = "AlperKaya@example.com",
                            FirstName = "Alper",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 3,
                            BirthDate = new DateTime(2021, 10, 7, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7096),
                            City = "Tokat",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7096),
                            Email = "PinarÖzkan@example.com",
                            FirstName = "Pinar",
                            IsDeleted = false,
                            LastName = "Özkan"
                        },
                        new
                        {
                            StudentId = 4,
                            BirthDate = new DateTime(2020, 10, 7, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7097),
                            City = "Batman",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7098),
                            Email = "KadirÇetin@example.com",
                            FirstName = "Kadir",
                            IsDeleted = false,
                            LastName = "Çetin"
                        },
                        new
                        {
                            StudentId = 5,
                            BirthDate = new DateTime(2019, 10, 8, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7100),
                            City = "Aksaray",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7106),
                            Email = "EnginÇetin@example.com",
                            FirstName = "Engin",
                            IsDeleted = false,
                            LastName = "Çetin"
                        },
                        new
                        {
                            StudentId = 6,
                            BirthDate = new DateTime(2018, 10, 8, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7112),
                            City = "Bingöl",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7112),
                            Email = "EsraKoç@example.com",
                            FirstName = "Esra",
                            IsDeleted = false,
                            LastName = "Koç"
                        },
                        new
                        {
                            StudentId = 7,
                            BirthDate = new DateTime(2017, 10, 8, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7113),
                            City = "Antalya",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7114),
                            Email = "VolkanKaya@example.com",
                            FirstName = "Volkan",
                            IsDeleted = false,
                            LastName = "Kaya"
                        },
                        new
                        {
                            StudentId = 8,
                            BirthDate = new DateTime(2016, 10, 8, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7115),
                            City = "Kars",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7116),
                            Email = "AylinDuman@example.com",
                            FirstName = "Aylin",
                            IsDeleted = false,
                            LastName = "Duman"
                        },
                        new
                        {
                            StudentId = 9,
                            BirthDate = new DateTime(2015, 10, 9, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7117),
                            City = "Ardahan",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7117),
                            Email = "PinarKurt@example.com",
                            FirstName = "Pinar",
                            IsDeleted = false,
                            LastName = "Kurt"
                        },
                        new
                        {
                            StudentId = 10,
                            BirthDate = new DateTime(2014, 10, 9, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7119),
                            City = "Erzurum",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7120),
                            Email = "AbbasDemir@example.com",
                            FirstName = "Abbas",
                            IsDeleted = false,
                            LastName = "Demir"
                        },
                        new
                        {
                            StudentId = 11,
                            BirthDate = new DateTime(2013, 10, 9, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7121),
                            City = "Diyarbakır",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7121),
                            Email = "HaticeÖzkan@example.com",
                            FirstName = "Hatice",
                            IsDeleted = false,
                            LastName = "Özkan"
                        },
                        new
                        {
                            StudentId = 12,
                            BirthDate = new DateTime(2012, 10, 9, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7122),
                            City = "İstanbul",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7122),
                            Email = "ŞirinYavuz@example.com",
                            FirstName = "Şirin",
                            IsDeleted = false,
                            LastName = "Yavuz"
                        },
                        new
                        {
                            StudentId = 13,
                            BirthDate = new DateTime(2011, 10, 10, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7123),
                            City = "Iğdır",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7125),
                            Email = "SevgiYavuz@example.com",
                            FirstName = "Sevgi",
                            IsDeleted = false,
                            LastName = "Yavuz"
                        },
                        new
                        {
                            StudentId = 14,
                            BirthDate = new DateTime(2010, 10, 10, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7126),
                            City = "Kütahya",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7126),
                            Email = "MeryemYalçın@example.com",
                            FirstName = "Meryem",
                            IsDeleted = false,
                            LastName = "Yalçın"
                        },
                        new
                        {
                            StudentId = 15,
                            BirthDate = new DateTime(2009, 10, 10, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7127),
                            City = "Bartın",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7128),
                            Email = "HakanEkinci@example.com",
                            FirstName = "Hakan",
                            IsDeleted = false,
                            LastName = "Ekinci"
                        },
                        new
                        {
                            StudentId = 16,
                            BirthDate = new DateTime(2008, 10, 10, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7128),
                            City = "Gümüşhane",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7129),
                            Email = "TolgaÇetin@example.com",
                            FirstName = "Tolga",
                            IsDeleted = false,
                            LastName = "Çetin"
                        },
                        new
                        {
                            StudentId = 17,
                            BirthDate = new DateTime(2007, 10, 11, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7129),
                            City = "Ankara",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7130),
                            Email = "BarışÖzkan@example.com",
                            FirstName = "Barış",
                            IsDeleted = false,
                            LastName = "Özkan"
                        },
                        new
                        {
                            StudentId = 18,
                            BirthDate = new DateTime(2006, 10, 11, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7132),
                            City = "Şırnak",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7132),
                            Email = "MuratÇetin@example.com",
                            FirstName = "Murat",
                            IsDeleted = false,
                            LastName = "Çetin"
                        },
                        new
                        {
                            StudentId = 19,
                            BirthDate = new DateTime(2005, 10, 11, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7133),
                            City = "Osmaniye",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7133),
                            Email = "OrhanToprak@example.com",
                            FirstName = "Orhan",
                            IsDeleted = false,
                            LastName = "Toprak"
                        },
                        new
                        {
                            StudentId = 20,
                            BirthDate = new DateTime(2004, 10, 11, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7134),
                            City = "Afyonkarahisar",
                            CreaDate = new DateTime(2024, 10, 6, 6, 58, 24, 637, DateTimeKind.Utc).AddTicks(7134),
                            Email = "EmineÇelik@example.com",
                            FirstName = "Emine",
                            IsDeleted = false,
                            LastName = "Çelik"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
